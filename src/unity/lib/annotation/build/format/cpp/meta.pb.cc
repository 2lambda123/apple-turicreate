// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace TuriCreate {
namespace Annotation {
namespace Specification {
class MetaStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MetaString> {
} _MetaString_default_instance_;
class MetaIntegerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MetaInteger> {
} _MetaInteger_default_instance_;
class ActivityClassificationMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActivityClassificationMeta> {
  public:
  const ::TuriCreate::Annotation::Specification::MetaString* strings_;
  const ::TuriCreate::Annotation::Specification::MetaInteger* integers_;
} _ActivityClassificationMeta_default_instance_;
class AudioClassificationMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioClassificationMeta> {
  public:
  const ::TuriCreate::Annotation::Specification::MetaString* strings_;
  const ::TuriCreate::Annotation::Specification::MetaInteger* integers_;
} _AudioClassificationMeta_default_instance_;
class DrawingClassificationMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DrawingClassificationMeta> {
  public:
  const ::TuriCreate::Annotation::Specification::MetaString* strings_;
  const ::TuriCreate::Annotation::Specification::MetaInteger* integers_;
} _DrawingClassificationMeta_default_instance_;
class ImageClassificationMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageClassificationMeta> {
  public:
  const ::TuriCreate::Annotation::Specification::MetaString* strings_;
  const ::TuriCreate::Annotation::Specification::MetaInteger* integers_;
} _ImageClassificationMeta_default_instance_;
class ObjectDetectionMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectDetectionMeta> {
  public:
  const ::TuriCreate::Annotation::Specification::MetaString* strings_;
  const ::TuriCreate::Annotation::Specification::MetaInteger* integers_;
} _ObjectDetectionMeta_default_instance_;
class MetaDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MetaData> {
  public:
  const ::TuriCreate::Annotation::Specification::ActivityClassificationMeta* activity_classification_;
  const ::TuriCreate::Annotation::Specification::AudioClassificationMeta* audio_classification_;
  const ::TuriCreate::Annotation::Specification::DrawingClassificationMeta* drawing_classification_;
  const ::TuriCreate::Annotation::Specification::ImageClassificationMeta* image_classification_;
  const ::TuriCreate::Annotation::Specification::ObjectDetectionMeta* object_detection_;
} _MetaData_default_instance_;

namespace protobuf_meta_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _MetaString_default_instance_.Shutdown();
  _MetaInteger_default_instance_.Shutdown();
  _ActivityClassificationMeta_default_instance_.Shutdown();
  _AudioClassificationMeta_default_instance_.Shutdown();
  _DrawingClassificationMeta_default_instance_.Shutdown();
  _ImageClassificationMeta_default_instance_.Shutdown();
  _ObjectDetectionMeta_default_instance_.Shutdown();
  _MetaData_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MetaString_default_instance_.DefaultConstruct();
  _MetaInteger_default_instance_.DefaultConstruct();
  _ActivityClassificationMeta_default_instance_.DefaultConstruct();
  _AudioClassificationMeta_default_instance_.DefaultConstruct();
  _DrawingClassificationMeta_default_instance_.DefaultConstruct();
  _ImageClassificationMeta_default_instance_.DefaultConstruct();
  _ObjectDetectionMeta_default_instance_.DefaultConstruct();
  _MetaData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_meta_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaString::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaString::MetaString()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.MetaString)
}
MetaString::MetaString(const MetaString& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      labels_(from.labels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.MetaString)
}

void MetaString::SharedCtor() {
  _cached_size_ = 0;
}

MetaString::~MetaString() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.MetaString)
  SharedDtor();
}

void MetaString::SharedDtor() {
}

void MetaString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaString& MetaString::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaString* MetaString::New(::google::protobuf::Arena* arena) const {
  MetaString* n = new MetaString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaString::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.MetaString)
  labels_.Clear();
}

bool MetaString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.MetaString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TuriCreate.Annotation.Specification.MetaString.labels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.MetaString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.MetaString)
  return false;
#undef DO_
}

void MetaString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.MetaString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string labels = 1;
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TuriCreate.Annotation.Specification.MetaString.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->labels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.MetaString)
}

size_t MetaString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.MetaString)
  size_t total_size = 0;

  // repeated string labels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetaString*>(&from));
}

void MetaString::MergeFrom(const MetaString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.MetaString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
}

void MetaString::CopyFrom(const MetaString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.MetaString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaString::IsInitialized() const {
  return true;
}

void MetaString::Swap(MetaString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaString::InternalSwap(MetaString* other) {
  labels_.InternalSwap(&other->labels_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MetaString::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.MetaString";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaString

// repeated string labels = 1;
int MetaString::labels_size() const {
  return labels_.size();
}
void MetaString::clear_labels() {
  labels_.Clear();
}
const ::std::string& MetaString::labels(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaString.labels)
  return labels_.Get(index);
}
::std::string* MetaString::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.MetaString.labels)
  return labels_.Mutable(index);
}
void MetaString::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.MetaString.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MetaString::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.MetaString.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
void MetaString::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TuriCreate.Annotation.Specification.MetaString.labels)
}
void MetaString::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TuriCreate.Annotation.Specification.MetaString.labels)
}
::std::string* MetaString::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:TuriCreate.Annotation.Specification.MetaString.labels)
  return labels_.Add();
}
void MetaString::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.MetaString.labels)
}
#if LANG_CXX11
void MetaString::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.MetaString.labels)
}
#endif
void MetaString::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TuriCreate.Annotation.Specification.MetaString.labels)
}
void MetaString::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TuriCreate.Annotation.Specification.MetaString.labels)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MetaString::labels() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.MetaString.labels)
  return labels_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MetaString::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.MetaString.labels)
  return &labels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaInteger::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaInteger::MetaInteger()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.MetaInteger)
}
MetaInteger::MetaInteger(const MetaInteger& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      labels_(from.labels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.MetaInteger)
}

void MetaInteger::SharedCtor() {
  _cached_size_ = 0;
}

MetaInteger::~MetaInteger() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.MetaInteger)
  SharedDtor();
}

void MetaInteger::SharedDtor() {
}

void MetaInteger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaInteger& MetaInteger::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaInteger* MetaInteger::New(::google::protobuf::Arena* arena) const {
  MetaInteger* n = new MetaInteger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaInteger::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.MetaInteger)
  labels_.Clear();
}

bool MetaInteger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.MetaInteger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_labels())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_labels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.MetaInteger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.MetaInteger)
  return false;
#undef DO_
}

void MetaInteger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.MetaInteger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 labels = 1;
  if (this->labels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_labels_cached_byte_size_);
  }
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->labels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.MetaInteger)
}

size_t MetaInteger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.MetaInteger)
  size_t total_size = 0;

  // repeated int64 labels = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _labels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaInteger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetaInteger*>(&from));
}

void MetaInteger::MergeFrom(const MetaInteger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.MetaInteger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
}

void MetaInteger::CopyFrom(const MetaInteger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.MetaInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaInteger::IsInitialized() const {
  return true;
}

void MetaInteger::Swap(MetaInteger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaInteger::InternalSwap(MetaInteger* other) {
  labels_.InternalSwap(&other->labels_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MetaInteger::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.MetaInteger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaInteger

// repeated int64 labels = 1;
int MetaInteger::labels_size() const {
  return labels_.size();
}
void MetaInteger::clear_labels() {
  labels_.Clear();
}
::google::protobuf::int64 MetaInteger::labels(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaInteger.labels)
  return labels_.Get(index);
}
void MetaInteger::set_labels(int index, ::google::protobuf::int64 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.MetaInteger.labels)
}
void MetaInteger::add_labels(::google::protobuf::int64 value) {
  labels_.Add(value);
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.MetaInteger.labels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MetaInteger::labels() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.MetaInteger.labels)
  return labels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MetaInteger::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.MetaInteger.labels)
  return &labels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityClassificationMeta::kStringsFieldNumber;
const int ActivityClassificationMeta::kIntegersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityClassificationMeta::ActivityClassificationMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
}
ActivityClassificationMeta::ActivityClassificationMeta(const ActivityClassificationMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Label();
  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
}

void ActivityClassificationMeta::SharedCtor() {
  clear_has_Label();
  _cached_size_ = 0;
}

ActivityClassificationMeta::~ActivityClassificationMeta() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  SharedDtor();
}

void ActivityClassificationMeta::SharedDtor() {
  if (has_Label()) {
    clear_Label();
  }
}

void ActivityClassificationMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityClassificationMeta& ActivityClassificationMeta::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityClassificationMeta* ActivityClassificationMeta::New(::google::protobuf::Arena* arena) const {
  ActivityClassificationMeta* n = new ActivityClassificationMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityClassificationMeta::clear_Label() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  switch (Label_case()) {
    case kStrings: {
      delete Label_.strings_;
      break;
    }
    case kIntegers: {
      delete Label_.integers_;
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABEL_NOT_SET;
}


void ActivityClassificationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  clear_Label();
}

bool ActivityClassificationMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TuriCreate.Annotation.Specification.MetaString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  return false;
#undef DO_
}

void ActivityClassificationMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TuriCreate.Annotation.Specification.MetaString strings = 1;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *Label_.strings_, output);
  }

  // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
  if (has_integers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *Label_.integers_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
}

size_t ActivityClassificationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  size_t total_size = 0;

  switch (Label_case()) {
    // .TuriCreate.Annotation.Specification.MetaString strings = 1;
    case kStrings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.strings_);
      break;
    }
    // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
    case kIntegers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.integers_);
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityClassificationMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityClassificationMeta*>(&from));
}

void ActivityClassificationMeta::MergeFrom(const ActivityClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
}

void ActivityClassificationMeta::CopyFrom(const ActivityClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ActivityClassificationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityClassificationMeta::IsInitialized() const {
  return true;
}

void ActivityClassificationMeta::Swap(ActivityClassificationMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityClassificationMeta::InternalSwap(ActivityClassificationMeta* other) {
  std::swap(Label_, other->Label_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActivityClassificationMeta::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ActivityClassificationMeta";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityClassificationMeta

// .TuriCreate.Annotation.Specification.MetaString strings = 1;
bool ActivityClassificationMeta::has_strings() const {
  return Label_case() == kStrings;
}
void ActivityClassificationMeta::set_has_strings() {
  _oneof_case_[0] = kStrings;
}
void ActivityClassificationMeta::clear_strings() {
  if (has_strings()) {
    delete Label_.strings_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaString& ActivityClassificationMeta::strings() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ActivityClassificationMeta.strings)
  return has_strings()
      ? *Label_.strings_
      : ::TuriCreate::Annotation::Specification::MetaString::default_instance();
}
::TuriCreate::Annotation::Specification::MetaString* ActivityClassificationMeta::mutable_strings() {
  if (!has_strings()) {
    clear_Label();
    set_has_strings();
    Label_.strings_ = new ::TuriCreate::Annotation::Specification::MetaString;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ActivityClassificationMeta.strings)
  return Label_.strings_;
}
::TuriCreate::Annotation::Specification::MetaString* ActivityClassificationMeta::release_strings() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ActivityClassificationMeta.strings)
  if (has_strings()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaString* temp = Label_.strings_;
    Label_.strings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActivityClassificationMeta::set_allocated_strings(::TuriCreate::Annotation::Specification::MetaString* strings) {
  clear_Label();
  if (strings) {
    set_has_strings();
    Label_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ActivityClassificationMeta.strings)
}

// .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
bool ActivityClassificationMeta::has_integers() const {
  return Label_case() == kIntegers;
}
void ActivityClassificationMeta::set_has_integers() {
  _oneof_case_[0] = kIntegers;
}
void ActivityClassificationMeta::clear_integers() {
  if (has_integers()) {
    delete Label_.integers_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaInteger& ActivityClassificationMeta::integers() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ActivityClassificationMeta.integers)
  return has_integers()
      ? *Label_.integers_
      : ::TuriCreate::Annotation::Specification::MetaInteger::default_instance();
}
::TuriCreate::Annotation::Specification::MetaInteger* ActivityClassificationMeta::mutable_integers() {
  if (!has_integers()) {
    clear_Label();
    set_has_integers();
    Label_.integers_ = new ::TuriCreate::Annotation::Specification::MetaInteger;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ActivityClassificationMeta.integers)
  return Label_.integers_;
}
::TuriCreate::Annotation::Specification::MetaInteger* ActivityClassificationMeta::release_integers() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ActivityClassificationMeta.integers)
  if (has_integers()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaInteger* temp = Label_.integers_;
    Label_.integers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActivityClassificationMeta::set_allocated_integers(::TuriCreate::Annotation::Specification::MetaInteger* integers) {
  clear_Label();
  if (integers) {
    set_has_integers();
    Label_.integers_ = integers;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ActivityClassificationMeta.integers)
}

bool ActivityClassificationMeta::has_Label() const {
  return Label_case() != LABEL_NOT_SET;
}
void ActivityClassificationMeta::clear_has_Label() {
  _oneof_case_[0] = LABEL_NOT_SET;
}
ActivityClassificationMeta::LabelCase ActivityClassificationMeta::Label_case() const {
  return ActivityClassificationMeta::LabelCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioClassificationMeta::kStringsFieldNumber;
const int AudioClassificationMeta::kIntegersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioClassificationMeta::AudioClassificationMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.AudioClassificationMeta)
}
AudioClassificationMeta::AudioClassificationMeta(const AudioClassificationMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Label();
  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.AudioClassificationMeta)
}

void AudioClassificationMeta::SharedCtor() {
  clear_has_Label();
  _cached_size_ = 0;
}

AudioClassificationMeta::~AudioClassificationMeta() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  SharedDtor();
}

void AudioClassificationMeta::SharedDtor() {
  if (has_Label()) {
    clear_Label();
  }
}

void AudioClassificationMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioClassificationMeta& AudioClassificationMeta::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioClassificationMeta* AudioClassificationMeta::New(::google::protobuf::Arena* arena) const {
  AudioClassificationMeta* n = new AudioClassificationMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioClassificationMeta::clear_Label() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  switch (Label_case()) {
    case kStrings: {
      delete Label_.strings_;
      break;
    }
    case kIntegers: {
      delete Label_.integers_;
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABEL_NOT_SET;
}


void AudioClassificationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  clear_Label();
}

bool AudioClassificationMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TuriCreate.Annotation.Specification.MetaString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  return false;
#undef DO_
}

void AudioClassificationMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TuriCreate.Annotation.Specification.MetaString strings = 1;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *Label_.strings_, output);
  }

  // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
  if (has_integers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *Label_.integers_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.AudioClassificationMeta)
}

size_t AudioClassificationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  size_t total_size = 0;

  switch (Label_case()) {
    // .TuriCreate.Annotation.Specification.MetaString strings = 1;
    case kStrings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.strings_);
      break;
    }
    // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
    case kIntegers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.integers_);
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioClassificationMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioClassificationMeta*>(&from));
}

void AudioClassificationMeta::MergeFrom(const AudioClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
}

void AudioClassificationMeta::CopyFrom(const AudioClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.AudioClassificationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioClassificationMeta::IsInitialized() const {
  return true;
}

void AudioClassificationMeta::Swap(AudioClassificationMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioClassificationMeta::InternalSwap(AudioClassificationMeta* other) {
  std::swap(Label_, other->Label_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioClassificationMeta::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.AudioClassificationMeta";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioClassificationMeta

// .TuriCreate.Annotation.Specification.MetaString strings = 1;
bool AudioClassificationMeta::has_strings() const {
  return Label_case() == kStrings;
}
void AudioClassificationMeta::set_has_strings() {
  _oneof_case_[0] = kStrings;
}
void AudioClassificationMeta::clear_strings() {
  if (has_strings()) {
    delete Label_.strings_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaString& AudioClassificationMeta::strings() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.AudioClassificationMeta.strings)
  return has_strings()
      ? *Label_.strings_
      : ::TuriCreate::Annotation::Specification::MetaString::default_instance();
}
::TuriCreate::Annotation::Specification::MetaString* AudioClassificationMeta::mutable_strings() {
  if (!has_strings()) {
    clear_Label();
    set_has_strings();
    Label_.strings_ = new ::TuriCreate::Annotation::Specification::MetaString;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.AudioClassificationMeta.strings)
  return Label_.strings_;
}
::TuriCreate::Annotation::Specification::MetaString* AudioClassificationMeta::release_strings() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.AudioClassificationMeta.strings)
  if (has_strings()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaString* temp = Label_.strings_;
    Label_.strings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AudioClassificationMeta::set_allocated_strings(::TuriCreate::Annotation::Specification::MetaString* strings) {
  clear_Label();
  if (strings) {
    set_has_strings();
    Label_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.AudioClassificationMeta.strings)
}

// .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
bool AudioClassificationMeta::has_integers() const {
  return Label_case() == kIntegers;
}
void AudioClassificationMeta::set_has_integers() {
  _oneof_case_[0] = kIntegers;
}
void AudioClassificationMeta::clear_integers() {
  if (has_integers()) {
    delete Label_.integers_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaInteger& AudioClassificationMeta::integers() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.AudioClassificationMeta.integers)
  return has_integers()
      ? *Label_.integers_
      : ::TuriCreate::Annotation::Specification::MetaInteger::default_instance();
}
::TuriCreate::Annotation::Specification::MetaInteger* AudioClassificationMeta::mutable_integers() {
  if (!has_integers()) {
    clear_Label();
    set_has_integers();
    Label_.integers_ = new ::TuriCreate::Annotation::Specification::MetaInteger;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.AudioClassificationMeta.integers)
  return Label_.integers_;
}
::TuriCreate::Annotation::Specification::MetaInteger* AudioClassificationMeta::release_integers() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.AudioClassificationMeta.integers)
  if (has_integers()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaInteger* temp = Label_.integers_;
    Label_.integers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AudioClassificationMeta::set_allocated_integers(::TuriCreate::Annotation::Specification::MetaInteger* integers) {
  clear_Label();
  if (integers) {
    set_has_integers();
    Label_.integers_ = integers;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.AudioClassificationMeta.integers)
}

bool AudioClassificationMeta::has_Label() const {
  return Label_case() != LABEL_NOT_SET;
}
void AudioClassificationMeta::clear_has_Label() {
  _oneof_case_[0] = LABEL_NOT_SET;
}
AudioClassificationMeta::LabelCase AudioClassificationMeta::Label_case() const {
  return AudioClassificationMeta::LabelCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrawingClassificationMeta::kStringsFieldNumber;
const int DrawingClassificationMeta::kIntegersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawingClassificationMeta::DrawingClassificationMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
}
DrawingClassificationMeta::DrawingClassificationMeta(const DrawingClassificationMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Label();
  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
}

void DrawingClassificationMeta::SharedCtor() {
  clear_has_Label();
  _cached_size_ = 0;
}

DrawingClassificationMeta::~DrawingClassificationMeta() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  SharedDtor();
}

void DrawingClassificationMeta::SharedDtor() {
  if (has_Label()) {
    clear_Label();
  }
}

void DrawingClassificationMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrawingClassificationMeta& DrawingClassificationMeta::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

DrawingClassificationMeta* DrawingClassificationMeta::New(::google::protobuf::Arena* arena) const {
  DrawingClassificationMeta* n = new DrawingClassificationMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrawingClassificationMeta::clear_Label() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  switch (Label_case()) {
    case kStrings: {
      delete Label_.strings_;
      break;
    }
    case kIntegers: {
      delete Label_.integers_;
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABEL_NOT_SET;
}


void DrawingClassificationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  clear_Label();
}

bool DrawingClassificationMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TuriCreate.Annotation.Specification.MetaString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  return false;
#undef DO_
}

void DrawingClassificationMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TuriCreate.Annotation.Specification.MetaString strings = 1;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *Label_.strings_, output);
  }

  // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
  if (has_integers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *Label_.integers_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
}

size_t DrawingClassificationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  size_t total_size = 0;

  switch (Label_case()) {
    // .TuriCreate.Annotation.Specification.MetaString strings = 1;
    case kStrings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.strings_);
      break;
    }
    // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
    case kIntegers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.integers_);
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawingClassificationMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrawingClassificationMeta*>(&from));
}

void DrawingClassificationMeta::MergeFrom(const DrawingClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
}

void DrawingClassificationMeta::CopyFrom(const DrawingClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.DrawingClassificationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawingClassificationMeta::IsInitialized() const {
  return true;
}

void DrawingClassificationMeta::Swap(DrawingClassificationMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawingClassificationMeta::InternalSwap(DrawingClassificationMeta* other) {
  std::swap(Label_, other->Label_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DrawingClassificationMeta::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.DrawingClassificationMeta";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrawingClassificationMeta

// .TuriCreate.Annotation.Specification.MetaString strings = 1;
bool DrawingClassificationMeta::has_strings() const {
  return Label_case() == kStrings;
}
void DrawingClassificationMeta::set_has_strings() {
  _oneof_case_[0] = kStrings;
}
void DrawingClassificationMeta::clear_strings() {
  if (has_strings()) {
    delete Label_.strings_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaString& DrawingClassificationMeta::strings() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.DrawingClassificationMeta.strings)
  return has_strings()
      ? *Label_.strings_
      : ::TuriCreate::Annotation::Specification::MetaString::default_instance();
}
::TuriCreate::Annotation::Specification::MetaString* DrawingClassificationMeta::mutable_strings() {
  if (!has_strings()) {
    clear_Label();
    set_has_strings();
    Label_.strings_ = new ::TuriCreate::Annotation::Specification::MetaString;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.DrawingClassificationMeta.strings)
  return Label_.strings_;
}
::TuriCreate::Annotation::Specification::MetaString* DrawingClassificationMeta::release_strings() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.DrawingClassificationMeta.strings)
  if (has_strings()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaString* temp = Label_.strings_;
    Label_.strings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DrawingClassificationMeta::set_allocated_strings(::TuriCreate::Annotation::Specification::MetaString* strings) {
  clear_Label();
  if (strings) {
    set_has_strings();
    Label_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.DrawingClassificationMeta.strings)
}

// .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
bool DrawingClassificationMeta::has_integers() const {
  return Label_case() == kIntegers;
}
void DrawingClassificationMeta::set_has_integers() {
  _oneof_case_[0] = kIntegers;
}
void DrawingClassificationMeta::clear_integers() {
  if (has_integers()) {
    delete Label_.integers_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaInteger& DrawingClassificationMeta::integers() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.DrawingClassificationMeta.integers)
  return has_integers()
      ? *Label_.integers_
      : ::TuriCreate::Annotation::Specification::MetaInteger::default_instance();
}
::TuriCreate::Annotation::Specification::MetaInteger* DrawingClassificationMeta::mutable_integers() {
  if (!has_integers()) {
    clear_Label();
    set_has_integers();
    Label_.integers_ = new ::TuriCreate::Annotation::Specification::MetaInteger;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.DrawingClassificationMeta.integers)
  return Label_.integers_;
}
::TuriCreate::Annotation::Specification::MetaInteger* DrawingClassificationMeta::release_integers() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.DrawingClassificationMeta.integers)
  if (has_integers()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaInteger* temp = Label_.integers_;
    Label_.integers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DrawingClassificationMeta::set_allocated_integers(::TuriCreate::Annotation::Specification::MetaInteger* integers) {
  clear_Label();
  if (integers) {
    set_has_integers();
    Label_.integers_ = integers;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.DrawingClassificationMeta.integers)
}

bool DrawingClassificationMeta::has_Label() const {
  return Label_case() != LABEL_NOT_SET;
}
void DrawingClassificationMeta::clear_has_Label() {
  _oneof_case_[0] = LABEL_NOT_SET;
}
DrawingClassificationMeta::LabelCase DrawingClassificationMeta::Label_case() const {
  return DrawingClassificationMeta::LabelCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageClassificationMeta::kStringsFieldNumber;
const int ImageClassificationMeta::kIntegersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageClassificationMeta::ImageClassificationMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ImageClassificationMeta)
}
ImageClassificationMeta::ImageClassificationMeta(const ImageClassificationMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Label();
  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ImageClassificationMeta)
}

void ImageClassificationMeta::SharedCtor() {
  clear_has_Label();
  _cached_size_ = 0;
}

ImageClassificationMeta::~ImageClassificationMeta() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  SharedDtor();
}

void ImageClassificationMeta::SharedDtor() {
  if (has_Label()) {
    clear_Label();
  }
}

void ImageClassificationMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageClassificationMeta& ImageClassificationMeta::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageClassificationMeta* ImageClassificationMeta::New(::google::protobuf::Arena* arena) const {
  ImageClassificationMeta* n = new ImageClassificationMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageClassificationMeta::clear_Label() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  switch (Label_case()) {
    case kStrings: {
      delete Label_.strings_;
      break;
    }
    case kIntegers: {
      delete Label_.integers_;
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABEL_NOT_SET;
}


void ImageClassificationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  clear_Label();
}

bool ImageClassificationMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TuriCreate.Annotation.Specification.MetaString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  return false;
#undef DO_
}

void ImageClassificationMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TuriCreate.Annotation.Specification.MetaString strings = 1;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *Label_.strings_, output);
  }

  // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
  if (has_integers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *Label_.integers_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ImageClassificationMeta)
}

size_t ImageClassificationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  size_t total_size = 0;

  switch (Label_case()) {
    // .TuriCreate.Annotation.Specification.MetaString strings = 1;
    case kStrings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.strings_);
      break;
    }
    // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
    case kIntegers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.integers_);
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageClassificationMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageClassificationMeta*>(&from));
}

void ImageClassificationMeta::MergeFrom(const ImageClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
}

void ImageClassificationMeta::CopyFrom(const ImageClassificationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ImageClassificationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageClassificationMeta::IsInitialized() const {
  return true;
}

void ImageClassificationMeta::Swap(ImageClassificationMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageClassificationMeta::InternalSwap(ImageClassificationMeta* other) {
  std::swap(Label_, other->Label_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageClassificationMeta::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ImageClassificationMeta";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageClassificationMeta

// .TuriCreate.Annotation.Specification.MetaString strings = 1;
bool ImageClassificationMeta::has_strings() const {
  return Label_case() == kStrings;
}
void ImageClassificationMeta::set_has_strings() {
  _oneof_case_[0] = kStrings;
}
void ImageClassificationMeta::clear_strings() {
  if (has_strings()) {
    delete Label_.strings_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaString& ImageClassificationMeta::strings() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageClassificationMeta.strings)
  return has_strings()
      ? *Label_.strings_
      : ::TuriCreate::Annotation::Specification::MetaString::default_instance();
}
::TuriCreate::Annotation::Specification::MetaString* ImageClassificationMeta::mutable_strings() {
  if (!has_strings()) {
    clear_Label();
    set_has_strings();
    Label_.strings_ = new ::TuriCreate::Annotation::Specification::MetaString;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ImageClassificationMeta.strings)
  return Label_.strings_;
}
::TuriCreate::Annotation::Specification::MetaString* ImageClassificationMeta::release_strings() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ImageClassificationMeta.strings)
  if (has_strings()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaString* temp = Label_.strings_;
    Label_.strings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ImageClassificationMeta::set_allocated_strings(::TuriCreate::Annotation::Specification::MetaString* strings) {
  clear_Label();
  if (strings) {
    set_has_strings();
    Label_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ImageClassificationMeta.strings)
}

// .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
bool ImageClassificationMeta::has_integers() const {
  return Label_case() == kIntegers;
}
void ImageClassificationMeta::set_has_integers() {
  _oneof_case_[0] = kIntegers;
}
void ImageClassificationMeta::clear_integers() {
  if (has_integers()) {
    delete Label_.integers_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaInteger& ImageClassificationMeta::integers() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageClassificationMeta.integers)
  return has_integers()
      ? *Label_.integers_
      : ::TuriCreate::Annotation::Specification::MetaInteger::default_instance();
}
::TuriCreate::Annotation::Specification::MetaInteger* ImageClassificationMeta::mutable_integers() {
  if (!has_integers()) {
    clear_Label();
    set_has_integers();
    Label_.integers_ = new ::TuriCreate::Annotation::Specification::MetaInteger;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ImageClassificationMeta.integers)
  return Label_.integers_;
}
::TuriCreate::Annotation::Specification::MetaInteger* ImageClassificationMeta::release_integers() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ImageClassificationMeta.integers)
  if (has_integers()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaInteger* temp = Label_.integers_;
    Label_.integers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ImageClassificationMeta::set_allocated_integers(::TuriCreate::Annotation::Specification::MetaInteger* integers) {
  clear_Label();
  if (integers) {
    set_has_integers();
    Label_.integers_ = integers;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ImageClassificationMeta.integers)
}

bool ImageClassificationMeta::has_Label() const {
  return Label_case() != LABEL_NOT_SET;
}
void ImageClassificationMeta::clear_has_Label() {
  _oneof_case_[0] = LABEL_NOT_SET;
}
ImageClassificationMeta::LabelCase ImageClassificationMeta::Label_case() const {
  return ImageClassificationMeta::LabelCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDetectionMeta::kStringsFieldNumber;
const int ObjectDetectionMeta::kIntegersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDetectionMeta::ObjectDetectionMeta()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
}
ObjectDetectionMeta::ObjectDetectionMeta(const ObjectDetectionMeta& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Label();
  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
}

void ObjectDetectionMeta::SharedCtor() {
  clear_has_Label();
  _cached_size_ = 0;
}

ObjectDetectionMeta::~ObjectDetectionMeta() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  SharedDtor();
}

void ObjectDetectionMeta::SharedDtor() {
  if (has_Label()) {
    clear_Label();
  }
}

void ObjectDetectionMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ObjectDetectionMeta& ObjectDetectionMeta::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectDetectionMeta* ObjectDetectionMeta::New(::google::protobuf::Arena* arena) const {
  ObjectDetectionMeta* n = new ObjectDetectionMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDetectionMeta::clear_Label() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  switch (Label_case()) {
    case kStrings: {
      delete Label_.strings_;
      break;
    }
    case kIntegers: {
      delete Label_.integers_;
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABEL_NOT_SET;
}


void ObjectDetectionMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  clear_Label();
}

bool ObjectDetectionMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TuriCreate.Annotation.Specification.MetaString strings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  return false;
#undef DO_
}

void ObjectDetectionMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TuriCreate.Annotation.Specification.MetaString strings = 1;
  if (has_strings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *Label_.strings_, output);
  }

  // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
  if (has_integers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *Label_.integers_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
}

size_t ObjectDetectionMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  size_t total_size = 0;

  switch (Label_case()) {
    // .TuriCreate.Annotation.Specification.MetaString strings = 1;
    case kStrings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.strings_);
      break;
    }
    // .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
    case kIntegers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Label_.integers_);
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDetectionMeta::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObjectDetectionMeta*>(&from));
}

void ObjectDetectionMeta::MergeFrom(const ObjectDetectionMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Label_case()) {
    case kStrings: {
      mutable_strings()->::TuriCreate::Annotation::Specification::MetaString::MergeFrom(from.strings());
      break;
    }
    case kIntegers: {
      mutable_integers()->::TuriCreate::Annotation::Specification::MetaInteger::MergeFrom(from.integers());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
}

void ObjectDetectionMeta::CopyFrom(const ObjectDetectionMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ObjectDetectionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionMeta::IsInitialized() const {
  return true;
}

void ObjectDetectionMeta::Swap(ObjectDetectionMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDetectionMeta::InternalSwap(ObjectDetectionMeta* other) {
  std::swap(Label_, other->Label_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ObjectDetectionMeta::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ObjectDetectionMeta";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDetectionMeta

// .TuriCreate.Annotation.Specification.MetaString strings = 1;
bool ObjectDetectionMeta::has_strings() const {
  return Label_case() == kStrings;
}
void ObjectDetectionMeta::set_has_strings() {
  _oneof_case_[0] = kStrings;
}
void ObjectDetectionMeta::clear_strings() {
  if (has_strings()) {
    delete Label_.strings_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaString& ObjectDetectionMeta::strings() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionMeta.strings)
  return has_strings()
      ? *Label_.strings_
      : ::TuriCreate::Annotation::Specification::MetaString::default_instance();
}
::TuriCreate::Annotation::Specification::MetaString* ObjectDetectionMeta::mutable_strings() {
  if (!has_strings()) {
    clear_Label();
    set_has_strings();
    Label_.strings_ = new ::TuriCreate::Annotation::Specification::MetaString;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ObjectDetectionMeta.strings)
  return Label_.strings_;
}
::TuriCreate::Annotation::Specification::MetaString* ObjectDetectionMeta::release_strings() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ObjectDetectionMeta.strings)
  if (has_strings()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaString* temp = Label_.strings_;
    Label_.strings_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDetectionMeta::set_allocated_strings(::TuriCreate::Annotation::Specification::MetaString* strings) {
  clear_Label();
  if (strings) {
    set_has_strings();
    Label_.strings_ = strings;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ObjectDetectionMeta.strings)
}

// .TuriCreate.Annotation.Specification.MetaInteger integers = 2;
bool ObjectDetectionMeta::has_integers() const {
  return Label_case() == kIntegers;
}
void ObjectDetectionMeta::set_has_integers() {
  _oneof_case_[0] = kIntegers;
}
void ObjectDetectionMeta::clear_integers() {
  if (has_integers()) {
    delete Label_.integers_;
    clear_has_Label();
  }
}
 const ::TuriCreate::Annotation::Specification::MetaInteger& ObjectDetectionMeta::integers() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionMeta.integers)
  return has_integers()
      ? *Label_.integers_
      : ::TuriCreate::Annotation::Specification::MetaInteger::default_instance();
}
::TuriCreate::Annotation::Specification::MetaInteger* ObjectDetectionMeta::mutable_integers() {
  if (!has_integers()) {
    clear_Label();
    set_has_integers();
    Label_.integers_ = new ::TuriCreate::Annotation::Specification::MetaInteger;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ObjectDetectionMeta.integers)
  return Label_.integers_;
}
::TuriCreate::Annotation::Specification::MetaInteger* ObjectDetectionMeta::release_integers() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ObjectDetectionMeta.integers)
  if (has_integers()) {
    clear_has_Label();
    ::TuriCreate::Annotation::Specification::MetaInteger* temp = Label_.integers_;
    Label_.integers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDetectionMeta::set_allocated_integers(::TuriCreate::Annotation::Specification::MetaInteger* integers) {
  clear_Label();
  if (integers) {
    set_has_integers();
    Label_.integers_ = integers;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ObjectDetectionMeta.integers)
}

bool ObjectDetectionMeta::has_Label() const {
  return Label_case() != LABEL_NOT_SET;
}
void ObjectDetectionMeta::clear_has_Label() {
  _oneof_case_[0] = LABEL_NOT_SET;
}
ObjectDetectionMeta::LabelCase ObjectDetectionMeta::Label_case() const {
  return ObjectDetectionMeta::LabelCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaData::kNumExamplesFieldNumber;
const int MetaData::kActivityClassificationFieldNumber;
const int MetaData::kAudioClassificationFieldNumber;
const int MetaData::kDrawingClassificationFieldNumber;
const int MetaData::kImageClassificationFieldNumber;
const int MetaData::kObjectDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaData::MetaData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_meta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_examples_ = from.num_examples_;
  clear_has_Type();
  switch (from.Type_case()) {
    case kActivityClassification: {
      mutable_activity_classification()->::TuriCreate::Annotation::Specification::ActivityClassificationMeta::MergeFrom(from.activity_classification());
      break;
    }
    case kAudioClassification: {
      mutable_audio_classification()->::TuriCreate::Annotation::Specification::AudioClassificationMeta::MergeFrom(from.audio_classification());
      break;
    }
    case kDrawingClassification: {
      mutable_drawing_classification()->::TuriCreate::Annotation::Specification::DrawingClassificationMeta::MergeFrom(from.drawing_classification());
      break;
    }
    case kImageClassification: {
      mutable_image_classification()->::TuriCreate::Annotation::Specification::ImageClassificationMeta::MergeFrom(from.image_classification());
      break;
    }
    case kObjectDetection: {
      mutable_object_detection()->::TuriCreate::Annotation::Specification::ObjectDetectionMeta::MergeFrom(from.object_detection());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.MetaData)
}

void MetaData::SharedCtor() {
  num_examples_ = GOOGLE_LONGLONG(0);
  clear_has_Type();
  _cached_size_ = 0;
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.MetaData)
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (has_Type()) {
    clear_Type();
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaData& MetaData::default_instance() {
  protobuf_meta_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetaData* MetaData::New(::google::protobuf::Arena* arena) const {
  MetaData* n = new MetaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetaData::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.MetaData)
  switch (Type_case()) {
    case kActivityClassification: {
      delete Type_.activity_classification_;
      break;
    }
    case kAudioClassification: {
      delete Type_.audio_classification_;
      break;
    }
    case kDrawingClassification: {
      delete Type_.drawing_classification_;
      break;
    }
    case kImageClassification: {
      delete Type_.image_classification_;
      break;
    }
    case kObjectDetection: {
      delete Type_.object_detection_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.MetaData)
  num_examples_ = GOOGLE_LONGLONG(0);
  clear_Type();
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.MetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 num_examples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ActivityClassificationMeta activity_classification = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.AudioClassificationMeta audio_classification = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.DrawingClassificationMeta drawing_classification = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawing_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ImageClassificationMeta image_classification = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ObjectDetectionMeta object_detection = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.MetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.MetaData)
  return false;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.MetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_examples = 1;
  if (this->num_examples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_examples(), output);
  }

  // .TuriCreate.Annotation.Specification.ActivityClassificationMeta activity_classification = 100;
  if (has_activity_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, *Type_.activity_classification_, output);
  }

  // .TuriCreate.Annotation.Specification.AudioClassificationMeta audio_classification = 101;
  if (has_audio_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, *Type_.audio_classification_, output);
  }

  // .TuriCreate.Annotation.Specification.DrawingClassificationMeta drawing_classification = 102;
  if (has_drawing_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, *Type_.drawing_classification_, output);
  }

  // .TuriCreate.Annotation.Specification.ImageClassificationMeta image_classification = 103;
  if (has_image_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103, *Type_.image_classification_, output);
  }

  // .TuriCreate.Annotation.Specification.ObjectDetectionMeta object_detection = 104;
  if (has_object_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      104, *Type_.object_detection_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.MetaData)
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.MetaData)
  size_t total_size = 0;

  // int64 num_examples = 1;
  if (this->num_examples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_examples());
  }

  switch (Type_case()) {
    // .TuriCreate.Annotation.Specification.ActivityClassificationMeta activity_classification = 100;
    case kActivityClassification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.activity_classification_);
      break;
    }
    // .TuriCreate.Annotation.Specification.AudioClassificationMeta audio_classification = 101;
    case kAudioClassification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.audio_classification_);
      break;
    }
    // .TuriCreate.Annotation.Specification.DrawingClassificationMeta drawing_classification = 102;
    case kDrawingClassification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.drawing_classification_);
      break;
    }
    // .TuriCreate.Annotation.Specification.ImageClassificationMeta image_classification = 103;
    case kImageClassification: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.image_classification_);
      break;
    }
    // .TuriCreate.Annotation.Specification.ObjectDetectionMeta object_detection = 104;
    case kObjectDetection: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Type_.object_detection_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetaData*>(&from));
}

void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_examples() != 0) {
    set_num_examples(from.num_examples());
  }
  switch (from.Type_case()) {
    case kActivityClassification: {
      mutable_activity_classification()->::TuriCreate::Annotation::Specification::ActivityClassificationMeta::MergeFrom(from.activity_classification());
      break;
    }
    case kAudioClassification: {
      mutable_audio_classification()->::TuriCreate::Annotation::Specification::AudioClassificationMeta::MergeFrom(from.audio_classification());
      break;
    }
    case kDrawingClassification: {
      mutable_drawing_classification()->::TuriCreate::Annotation::Specification::DrawingClassificationMeta::MergeFrom(from.drawing_classification());
      break;
    }
    case kImageClassification: {
      mutable_image_classification()->::TuriCreate::Annotation::Specification::ImageClassificationMeta::MergeFrom(from.image_classification());
      break;
    }
    case kObjectDetection: {
      mutable_object_detection()->::TuriCreate::Annotation::Specification::ObjectDetectionMeta::MergeFrom(from.object_detection());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaData::InternalSwap(MetaData* other) {
  std::swap(num_examples_, other->num_examples_);
  std::swap(Type_, other->Type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MetaData::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.MetaData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetaData

// int64 num_examples = 1;
void MetaData::clear_num_examples() {
  num_examples_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MetaData::num_examples() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaData.num_examples)
  return num_examples_;
}
void MetaData::set_num_examples(::google::protobuf::int64 value) {
  
  num_examples_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.MetaData.num_examples)
}

// .TuriCreate.Annotation.Specification.ActivityClassificationMeta activity_classification = 100;
bool MetaData::has_activity_classification() const {
  return Type_case() == kActivityClassification;
}
void MetaData::set_has_activity_classification() {
  _oneof_case_[0] = kActivityClassification;
}
void MetaData::clear_activity_classification() {
  if (has_activity_classification()) {
    delete Type_.activity_classification_;
    clear_has_Type();
  }
}
 const ::TuriCreate::Annotation::Specification::ActivityClassificationMeta& MetaData::activity_classification() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaData.activity_classification)
  return has_activity_classification()
      ? *Type_.activity_classification_
      : ::TuriCreate::Annotation::Specification::ActivityClassificationMeta::default_instance();
}
::TuriCreate::Annotation::Specification::ActivityClassificationMeta* MetaData::mutable_activity_classification() {
  if (!has_activity_classification()) {
    clear_Type();
    set_has_activity_classification();
    Type_.activity_classification_ = new ::TuriCreate::Annotation::Specification::ActivityClassificationMeta;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.MetaData.activity_classification)
  return Type_.activity_classification_;
}
::TuriCreate::Annotation::Specification::ActivityClassificationMeta* MetaData::release_activity_classification() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.MetaData.activity_classification)
  if (has_activity_classification()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::ActivityClassificationMeta* temp = Type_.activity_classification_;
    Type_.activity_classification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MetaData::set_allocated_activity_classification(::TuriCreate::Annotation::Specification::ActivityClassificationMeta* activity_classification) {
  clear_Type();
  if (activity_classification) {
    set_has_activity_classification();
    Type_.activity_classification_ = activity_classification;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.MetaData.activity_classification)
}

// .TuriCreate.Annotation.Specification.AudioClassificationMeta audio_classification = 101;
bool MetaData::has_audio_classification() const {
  return Type_case() == kAudioClassification;
}
void MetaData::set_has_audio_classification() {
  _oneof_case_[0] = kAudioClassification;
}
void MetaData::clear_audio_classification() {
  if (has_audio_classification()) {
    delete Type_.audio_classification_;
    clear_has_Type();
  }
}
 const ::TuriCreate::Annotation::Specification::AudioClassificationMeta& MetaData::audio_classification() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaData.audio_classification)
  return has_audio_classification()
      ? *Type_.audio_classification_
      : ::TuriCreate::Annotation::Specification::AudioClassificationMeta::default_instance();
}
::TuriCreate::Annotation::Specification::AudioClassificationMeta* MetaData::mutable_audio_classification() {
  if (!has_audio_classification()) {
    clear_Type();
    set_has_audio_classification();
    Type_.audio_classification_ = new ::TuriCreate::Annotation::Specification::AudioClassificationMeta;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.MetaData.audio_classification)
  return Type_.audio_classification_;
}
::TuriCreate::Annotation::Specification::AudioClassificationMeta* MetaData::release_audio_classification() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.MetaData.audio_classification)
  if (has_audio_classification()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::AudioClassificationMeta* temp = Type_.audio_classification_;
    Type_.audio_classification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MetaData::set_allocated_audio_classification(::TuriCreate::Annotation::Specification::AudioClassificationMeta* audio_classification) {
  clear_Type();
  if (audio_classification) {
    set_has_audio_classification();
    Type_.audio_classification_ = audio_classification;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.MetaData.audio_classification)
}

// .TuriCreate.Annotation.Specification.DrawingClassificationMeta drawing_classification = 102;
bool MetaData::has_drawing_classification() const {
  return Type_case() == kDrawingClassification;
}
void MetaData::set_has_drawing_classification() {
  _oneof_case_[0] = kDrawingClassification;
}
void MetaData::clear_drawing_classification() {
  if (has_drawing_classification()) {
    delete Type_.drawing_classification_;
    clear_has_Type();
  }
}
 const ::TuriCreate::Annotation::Specification::DrawingClassificationMeta& MetaData::drawing_classification() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaData.drawing_classification)
  return has_drawing_classification()
      ? *Type_.drawing_classification_
      : ::TuriCreate::Annotation::Specification::DrawingClassificationMeta::default_instance();
}
::TuriCreate::Annotation::Specification::DrawingClassificationMeta* MetaData::mutable_drawing_classification() {
  if (!has_drawing_classification()) {
    clear_Type();
    set_has_drawing_classification();
    Type_.drawing_classification_ = new ::TuriCreate::Annotation::Specification::DrawingClassificationMeta;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.MetaData.drawing_classification)
  return Type_.drawing_classification_;
}
::TuriCreate::Annotation::Specification::DrawingClassificationMeta* MetaData::release_drawing_classification() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.MetaData.drawing_classification)
  if (has_drawing_classification()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::DrawingClassificationMeta* temp = Type_.drawing_classification_;
    Type_.drawing_classification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MetaData::set_allocated_drawing_classification(::TuriCreate::Annotation::Specification::DrawingClassificationMeta* drawing_classification) {
  clear_Type();
  if (drawing_classification) {
    set_has_drawing_classification();
    Type_.drawing_classification_ = drawing_classification;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.MetaData.drawing_classification)
}

// .TuriCreate.Annotation.Specification.ImageClassificationMeta image_classification = 103;
bool MetaData::has_image_classification() const {
  return Type_case() == kImageClassification;
}
void MetaData::set_has_image_classification() {
  _oneof_case_[0] = kImageClassification;
}
void MetaData::clear_image_classification() {
  if (has_image_classification()) {
    delete Type_.image_classification_;
    clear_has_Type();
  }
}
 const ::TuriCreate::Annotation::Specification::ImageClassificationMeta& MetaData::image_classification() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaData.image_classification)
  return has_image_classification()
      ? *Type_.image_classification_
      : ::TuriCreate::Annotation::Specification::ImageClassificationMeta::default_instance();
}
::TuriCreate::Annotation::Specification::ImageClassificationMeta* MetaData::mutable_image_classification() {
  if (!has_image_classification()) {
    clear_Type();
    set_has_image_classification();
    Type_.image_classification_ = new ::TuriCreate::Annotation::Specification::ImageClassificationMeta;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.MetaData.image_classification)
  return Type_.image_classification_;
}
::TuriCreate::Annotation::Specification::ImageClassificationMeta* MetaData::release_image_classification() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.MetaData.image_classification)
  if (has_image_classification()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::ImageClassificationMeta* temp = Type_.image_classification_;
    Type_.image_classification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MetaData::set_allocated_image_classification(::TuriCreate::Annotation::Specification::ImageClassificationMeta* image_classification) {
  clear_Type();
  if (image_classification) {
    set_has_image_classification();
    Type_.image_classification_ = image_classification;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.MetaData.image_classification)
}

// .TuriCreate.Annotation.Specification.ObjectDetectionMeta object_detection = 104;
bool MetaData::has_object_detection() const {
  return Type_case() == kObjectDetection;
}
void MetaData::set_has_object_detection() {
  _oneof_case_[0] = kObjectDetection;
}
void MetaData::clear_object_detection() {
  if (has_object_detection()) {
    delete Type_.object_detection_;
    clear_has_Type();
  }
}
 const ::TuriCreate::Annotation::Specification::ObjectDetectionMeta& MetaData::object_detection() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.MetaData.object_detection)
  return has_object_detection()
      ? *Type_.object_detection_
      : ::TuriCreate::Annotation::Specification::ObjectDetectionMeta::default_instance();
}
::TuriCreate::Annotation::Specification::ObjectDetectionMeta* MetaData::mutable_object_detection() {
  if (!has_object_detection()) {
    clear_Type();
    set_has_object_detection();
    Type_.object_detection_ = new ::TuriCreate::Annotation::Specification::ObjectDetectionMeta;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.MetaData.object_detection)
  return Type_.object_detection_;
}
::TuriCreate::Annotation::Specification::ObjectDetectionMeta* MetaData::release_object_detection() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.MetaData.object_detection)
  if (has_object_detection()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::ObjectDetectionMeta* temp = Type_.object_detection_;
    Type_.object_detection_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MetaData::set_allocated_object_detection(::TuriCreate::Annotation::Specification::ObjectDetectionMeta* object_detection) {
  clear_Type();
  if (object_detection) {
    set_has_object_detection();
    Type_.object_detection_ = object_detection;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.MetaData.object_detection)
}

bool MetaData::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
void MetaData::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
MetaData::TypeCase MetaData::Type_case() const {
  return MetaData::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

// @@protoc_insertion_point(global_scope)
