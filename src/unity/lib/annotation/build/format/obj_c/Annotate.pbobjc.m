// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotate.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Annotate.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - AnnotateRoot

@implementation AnnotateRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AnnotateRoot_FileDescriptor

static GPBFileDescriptor *AnnotateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"TuriCreate.Annotation.Specification"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ActivityClassificationLabel

@implementation ActivityClassificationLabel

@dynamic start;
@dynamic stop;

typedef struct ActivityClassificationLabel__storage_ {
  uint32_t _has_storage_[1];
  double start;
  double stop;
} ActivityClassificationLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = NULL,
        .number = ActivityClassificationLabel_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActivityClassificationLabel__storage_, start),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "stop",
        .dataTypeSpecific.className = NULL,
        .number = ActivityClassificationLabel_FieldNumber_Stop,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActivityClassificationLabel__storage_, stop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActivityClassificationLabel class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActivityClassificationLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioClassificationLabel

@implementation AudioClassificationLabel

@dynamic start;
@dynamic stop;

typedef struct AudioClassificationLabel__storage_ {
  uint32_t _has_storage_[1];
  double start;
  double stop;
} AudioClassificationLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "start",
        .dataTypeSpecific.className = NULL,
        .number = AudioClassificationLabel_FieldNumber_Start,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioClassificationLabel__storage_, start),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "stop",
        .dataTypeSpecific.className = NULL,
        .number = AudioClassificationLabel_FieldNumber_Stop,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioClassificationLabel__storage_, stop),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioClassificationLabel class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioClassificationLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DrawingClassificationLabel

@implementation DrawingClassificationLabel


typedef struct DrawingClassificationLabel__storage_ {
  uint32_t _has_storage_[1];
} DrawingClassificationLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DrawingClassificationLabel class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DrawingClassificationLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImageClassificationLabel

@implementation ImageClassificationLabel


typedef struct ImageClassificationLabel__storage_ {
  uint32_t _has_storage_[1];
} ImageClassificationLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageClassificationLabel class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ImageClassificationLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ObjectDetectionLabel

@implementation ObjectDetectionLabel

@dynamic height;
@dynamic width;
@dynamic x;
@dynamic y;

typedef struct ObjectDetectionLabel__storage_ {
  uint32_t _has_storage_[1];
  double height;
  double width;
  double x;
  double y;
} ObjectDetectionLabel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = ObjectDetectionLabel_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ObjectDetectionLabel__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = ObjectDetectionLabel_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ObjectDetectionLabel__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = ObjectDetectionLabel_FieldNumber_X,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ObjectDetectionLabel__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = ObjectDetectionLabel_FieldNumber_Y,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ObjectDetectionLabel__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ObjectDetectionLabel class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ObjectDetectionLabel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Label

@implementation Label

@dynamic labelIdentifierOneOfCase;
@dynamic labelTypeOneOfCase;
@dynamic intLabel;
@dynamic stringLabel;
@dynamic activityClassificationLabel;
@dynamic audioClassificationLabel;
@dynamic drawingClassificationLabel;
@dynamic imageClassificationLabel;
@dynamic objectDetectionLabel;

typedef struct Label__storage_ {
  uint32_t _has_storage_[3];
  NSString *stringLabel;
  ActivityClassificationLabel *activityClassificationLabel;
  AudioClassificationLabel *audioClassificationLabel;
  DrawingClassificationLabel *drawingClassificationLabel;
  ImageClassificationLabel *imageClassificationLabel;
  ObjectDetectionLabel *objectDetectionLabel;
  int64_t intLabel;
} Label__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intLabel",
        .dataTypeSpecific.className = NULL,
        .number = Label_FieldNumber_IntLabel,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Label__storage_, intLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "stringLabel",
        .dataTypeSpecific.className = NULL,
        .number = Label_FieldNumber_StringLabel,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Label__storage_, stringLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "activityClassificationLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(ActivityClassificationLabel),
        .number = Label_FieldNumber_ActivityClassificationLabel,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Label__storage_, activityClassificationLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioClassificationLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(AudioClassificationLabel),
        .number = Label_FieldNumber_AudioClassificationLabel,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Label__storage_, audioClassificationLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "drawingClassificationLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(DrawingClassificationLabel),
        .number = Label_FieldNumber_DrawingClassificationLabel,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Label__storage_, drawingClassificationLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageClassificationLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(ImageClassificationLabel),
        .number = Label_FieldNumber_ImageClassificationLabel,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Label__storage_, imageClassificationLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "objectDetectionLabel",
        .dataTypeSpecific.className = GPBStringifySymbol(ObjectDetectionLabel),
        .number = Label_FieldNumber_ObjectDetectionLabel,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Label__storage_, objectDetectionLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Label class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Label__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "labelIdentifier",
      "labelType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\013\000d\033\000\310\001\030\000\254\002\032\000\220\003\030\000\364\003\024\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Label_ClearLabelIdentifierOneOfCase(Label *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
void Label_ClearLabelTypeOneOfCase(Label *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBMaybeClearOneof(message, oneof, -2, 0);
}
#pragma mark - Annotation

@implementation Annotation

@dynamic labelsArray, labelsArray_Count;
@dynamic rowIndexArray, rowIndexArray_Count;

typedef struct Annotation__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *labelsArray;
  GPBInt64Array *rowIndexArray;
} Annotation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "labelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Label),
        .number = Annotation_FieldNumber_LabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Annotation__storage_, labelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rowIndexArray",
        .dataTypeSpecific.className = NULL,
        .number = Annotation_FieldNumber_RowIndexArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Annotation__storage_, rowIndexArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Annotation class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Annotation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000rowIndex\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Annotations

@implementation Annotations

@dynamic annotationArray, annotationArray_Count;

typedef struct Annotations__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *annotationArray;
} Annotations__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "annotationArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Annotation),
        .number = Annotations_FieldNumber_AnnotationArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Annotations__storage_, annotationArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Annotations class]
                                     rootClass:[AnnotateRoot class]
                                          file:AnnotateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Annotations__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
