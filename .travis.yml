language: minimal

services:
  - docker

cache:
  directories:
    - $HOME/.docker_ccache
    - $HOME/.docker_images
    - target

stages:
  - create_images
  - build
  - test

env:
  global:
    - CI=false
    - OMP_NUM_THREADS=4
  matrix:
    - PYTHON_VERSION=2.7
    - PYTHON_VERSION=3.5
    - PYTHON_VERSION=3.6

jobs:
  include:
    - stage: create_images
      env:
        - UBUNTU_VERSION=10.04
        - UBUNTU_VERSION=12.04
        - UBUNTU_VERSION=14.04
      before_script:
        - mkdir -p $HOME/.docker_images
        - (test -f $HOME/.docker_images/image.gz && docker load -i $HOME/.docker_images/image.gz) || true
      script:
        # clear target out of the cache, in case it's there from a previous build
        - rm -rf target
        - docker build -f scripts/Dockerfile-Ubuntu-${UBUNTU_VERSION} -t turicreate-temporary-build-image
      before_cache:
        - docker save turicreate-temporary-build-image | gzip -c > $HOME/.docker_images/image.gz

    - stage: build
      env:
        - UBUNTU_VERSION=10.04
      before_script:
        - docker load -i $HOME/.docker_images/image.gz
      script:
        # We sometimes get `error: No space left on device`
        # The workaround seems to be to force blocking I/O
        # See https://github.com/travis-ci/travis-ci/issues/8902 and
        # https://github.com/travis-ci/travis-ci/issues/4704#issuecomment-348435959
        # Check whether O_NONBLOCK is set (probably should print "1"):
        - python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); print(flags&os.O_NONBLOCK);'
        # Turn off O_NONBLOCK:
        - python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
        # Check whether O_NONBLOCK is set (should print "0"):
        - python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); print(flags&os.O_NONBLOCK);'

        # Build the wheel
        - bash scripts/make_wheel.sh --build_number=$CI_PIPELINE_ID --num_procs=3 --debug --skip_cpp_test --skip_test --skip_doc --docker-python${PYTHON_VERSION}

    - stage: test
      env:
        - UBUNTU_VERSION=12.04
        - UBUNTU_VERSION=14.04
      before_script:
        - docker load -i $HOME/.docker_images/image.gz
      script:
        # Remove style transfer unit test due to out-of-memory error.
        # Remove some additional tests temporarily to get under the two-hour timeout.
        - rm src/unity/python/turicreate/test/test_style_transfer.py src/unity/python/turicreate/test/test_object_detector.py
        - docker run --rm \
          --mount type=bind,source=$WORKSPACE,target=/build,consistency=delegated \
          -e "VIRTUALENV=virtualenv --python=python${PYTHON_VERSION}"
          -it turicreate-temporary-build-image \
          scripts/test_python.sh release python${PYTHON_VERSION}